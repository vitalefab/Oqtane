@namespace Oqtane.Modules.Admin.Users
@using System.Text.RegularExpressions;
@inherits ModuleBase
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject IProfileService ProfileService
@inject ISettingService SettingService
@inject IFileService FileService
@inject IServiceProvider ServiceProvider
@inject IStringLocalizer<Edit> Localizer
@inject IStringLocalizer<SharedResources> SharedLocalizer

@if (_initialized)
{
    <TabStrip>
        <TabPanel Name="Identity" ResourceKey="Identity">
            <ModuleMessage Message="@_passwordrequirements" Type="MessageType.Info" />
            <div class="container">
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="username" HelpText="The unique username for a user. Note that this field can not be modified." ResourceKey="Username"></Label>
                    <div class="col-sm-9">
                        <input id="username" class="form-control" @bind="@username" readonly />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="password" HelpText="The user's password. Please choose a password which is sufficiently secure." ResourceKey="Password"></Label>
                    <div class="col-sm-9">
                        <div class="input-group">
                            <input id="password" type="@_passwordtype" class="form-control" @bind="@_password" autocomplete="new-password" />
                            <button type="button" class="btn btn-secondary" @onclick="@TogglePassword" tabindex="-1">@_togglepassword</button>
                        </div>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="confirm" HelpText="Please enter the password again to confirm it matches with the value above" ResourceKey="Confirm"></Label>
                    <div class="col-sm-9">
                        <div class="input-group">
                            <input id="confirm" type="@_passwordtype" class="form-control" @bind="@confirm" autocomplete="new-password" />
                            <button type="button" class="btn btn-secondary" @onclick="@TogglePassword" tabindex="-1">@_togglepassword</button>
                        </div>
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="email" HelpText="The email address where the user will receive notifications" ResourceKey="Email"></Label>
                    <div class="col-sm-9">
                        <input id="email" class="form-control" @bind="@email" />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="displayname" HelpText="The full name of the user" ResourceKey="DisplayName"></Label>
                    <div class="col-sm-9">
                        <input id="displayname" class="form-control" @bind="@displayname" />
                    </div>
                </div>
                @if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Host))
                {
                    <div class="row mb-1 align-items-center">
                        <Label Class="col-sm-3" For="isdeleted" HelpText="Indicate if the user is active" ResourceKey="IsDeleted"></Label>
                        <div class="col-sm-9">
                            <select id="isdeleted" class="form-select" @bind="@isdeleted">
                                <option value="True">@SharedLocalizer["Yes"]</option>
                                <option value="False">@SharedLocalizer["No"]</option>
                            </select>
                        </div>
                    </div>
                }
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="lastlogin" HelpText="The date and time when the user last signed in" ResourceKey="LastLogin"></Label>
                    <div class="col-sm-9">
                        <input id="lastlogin" class="form-control" @bind="@lastlogin" readonly />
                    </div>
                </div>
                <div class="row mb-1 align-items-center">
                    <Label Class="col-sm-3" For="lastipaddress" HelpText="The IP Address of the user recorded during their last login" ResourceKey="LastIPAddress"></Label>
                    <div class="col-sm-9">
                        <input id="lastipaddress" class="form-control" @bind="@lastipaddress" readonly />
                    </div>
                </div>
            </div>
        </TabPanel>
        <TabPanel Name="Profile" ResourceKey="Profile">
            <div class="container">
                <div class="row mb-1 align-items-center">
                    @foreach (Profile profile in profiles)
                    {
                        var p = profile;
                        if (p.Category != category)
                        {
                            <div class="col text-center pb-2">
                                <strong>@p.Category</strong>
                            </div>
                            category = p.Category;
                        }
                        <div class="row mb-1 align-items-center">
                            <Label Class="col-sm-3" For="@p.Name" HelpText="@p.Description">@p.Title</Label>
                            <div class="col-sm-9">
                                @if (!string.IsNullOrEmpty(p.Options))
                                {
                                    <select id="@p.Name" class="form-select" @onchange="@(e => ProfileChanged(e, p.Name))">
                                        @foreach (var option in p.Options.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries))
                                        {
                                            @if (GetProfileValue(p.Name, "") == option || (GetProfileValue(p.Name, "") == "" && p.DefaultValue == option))
                                            {
                                                <option value="@option" selected>@option</option>
                                            }
                                            else
                                            {
                                                <option value="@option">@option</option>
                                            }
                                        }
                                    </select>
                                }
                                else
                                {
                                    @if (p.Rows == 1)
                                    {
                                        <input id="@p.Name" class="form-control" value="@GetProfileValue(p.Name, p.DefaultValue)" @onchange="@(e => ProfileChanged(e, p.Name))" @attributes="@(p.MaxLength > 0 ? new Dictionary<string, object> {{"maxlength", p.MaxLength }} : null)" />
                                    }
                                    else
                                    {
                                        <textarea id="@p.Name" class="form-control" rows="@p.Rows" value="@GetProfileValue(p.Name, p.DefaultValue)" @onchange="@(e => ProfileChanged(e, p.Name))" @attributes="@(p.MaxLength > 0 ? new Dictionary<string, object> {{"maxlength", p.MaxLength }} : null)"></textarea>
                                    }
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        </TabPanel>
    </TabStrip>

    <button type="button" class="btn btn-success" @onclick="SaveUser">@SharedLocalizer["Save"]</button>
    <NavLink class="btn btn-secondary" href="@NavigateUrl()">@SharedLocalizer["Cancel"]</NavLink>
    @if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Admin) && PageState.Runtime != Shared.Runtime.Hybrid && !ishost)
    {
        <button type="button" class="btn btn-primary ms-1" @onclick="ImpersonateUser">@Localizer["Impersonate"]</button>
    }
    @if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Host) && isdeleted == "True")
    {
        <ActionDialog Header="Delete User" Message="Are You Sure You Wish To Permanently Delete This User?" Action="Delete" Security="SecurityAccessLevel.Host" Class="btn btn-danger" OnClick="@(async () => await DeleteUser())" ResourceKey="DeleteUser" />
    }
    <br /><br />
    <AuditInfo CreatedBy="@createdby" CreatedOn="@createdon" ModifiedBy="@modifiedby" ModifiedOn="@modifiedon" DeletedBy="@deletedby" DeletedOn="@deletedon"></AuditInfo>
}

@code {
    private bool _initialized = false;
    private string _passwordrequirements;
    private int userid;
    private string username = string.Empty;
    private string _password = string.Empty;
    private string _passwordtype = "password";
    private string _togglepassword = string.Empty;
    private string confirm = string.Empty;
    private string email = string.Empty;
    private string displayname = string.Empty;
    private string isdeleted;
    private string lastlogin;
    private string lastipaddress;
    private bool ishost = false;

    private List<Profile> profiles;
    private Dictionary<string, string> userSettings;
    private string category = string.Empty;

    private string createdby;
    private DateTime createdon;
    private string modifiedby;
    private DateTime modifiedon;
    private string deletedby;
    private DateTime? deletedon;

    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _passwordrequirements = await UserService.GetPasswordRequirementsAsync(PageState.Site.SiteId);
            _togglepassword = SharedLocalizer["ShowPassword"];
            profiles = await ProfileService.GetProfilesAsync(PageState.Site.SiteId);

            if (PageState.QueryString.ContainsKey("id") && int.TryParse(PageState.QueryString["id"], out int UserId))
            {
                userid = UserId;
                var user = await UserService.GetUserAsync(userid, PageState.Site.SiteId);
                if (user != null)
                {
                    username = user.Username;
                    email = user.Email;
                    displayname = user.DisplayName;
                    isdeleted = user.IsDeleted.ToString();
                    lastlogin = string.Format("{0:MMM dd yyyy HH:mm:ss}", user.LastLoginOn);
                    lastipaddress = user.LastIPAddress;
                    ishost = UserSecurity.ContainsRole(user.Roles, RoleNames.Host);

                    userSettings = user.Settings;
                    createdby = user.CreatedBy;
                    createdon = user.CreatedOn;
                    modifiedby = user.ModifiedBy;
                    modifiedon = user.ModifiedOn;
                    deletedby = user.DeletedBy;
                    deletedon = user.DeletedOn;
                }
            }

            _initialized = true;
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading User {UserId} {Error}", userid, ex.Message);
            AddModuleMessage(Localizer["Error.User.Load"], MessageType.Error);
        }
    }

    private string GetProfileValue(string SettingName, string DefaultValue)
    {
        string value = SettingService.GetSetting(userSettings, SettingName, DefaultValue);
        if (value.Contains("]"))
        {
            value = value.Substring(value.IndexOf("]") + 1);
        }
        return value;
    }

    private async Task SaveUser()
    {
        try
        {
            if (username != string.Empty && email != string.Empty)
            {
                if (_password == confirm)
                {
                    if (ValidateProfiles())
                    {
                        var user = await UserService.GetUserAsync(userid, PageState.Site.SiteId);
                        user.SiteId = PageState.Site.SiteId;
                        user.Username = username;
                        user.Password = _password;
                        user.Email = email;
                        user.DisplayName = string.IsNullOrWhiteSpace(displayname) ? username : displayname;
                        if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Host))
                        {
                            user.IsDeleted = (isdeleted == null ? true : Boolean.Parse(isdeleted));
                        }

                        user = await UserService.UpdateUserAsync(user);
                        if (user != null)
                        {
                            await SettingService.UpdateUserSettingsAsync(userSettings, user.UserId);
                            await logger.LogInformation("User Saved {User}", user);
                            NavigationManager.NavigateTo(NavigateUrl());
                        }
                        else
                        {
                            AddModuleMessage(Localizer["Message.Password.Complexity"], MessageType.Error);
                        }
                    }
                }
                else
                {
                    AddModuleMessage(Localizer["Message.Password.NoMatch"], MessageType.Warning);
                }
            }
            else
            {
                AddModuleMessage(Localizer["Message.Required.ProfileInfo"], MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving User {Username} {Email} {Error}", username, email, ex.Message);
            AddModuleMessage(Localizer["Error.User.Save"], MessageType.Error);
        }
    }

    private async Task ImpersonateUser()
    {
        try
        {
            await logger.LogInformation(LogFunction.Security, "User {Username} Impersonated By Administrator {Administrator}", username, PageState.User.Username);

            // post back to the server so that the cookies are set correctly
            var interop = new Interop(JSRuntime);
            var fields = new { __RequestVerificationToken = SiteState.AntiForgeryToken, username = username, returnurl = PageState.Alias.Path };
            string url = Utilities.TenantUrl(PageState.Alias, "/pages/impersonate/");
            await interop.SubmitForm(url, fields);
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Impersonating User {Username} {Error}", username, ex.Message);
            AddModuleMessage(Localizer["Error.User.Impersonate"], MessageType.Error);
        }
    }

    private async Task DeleteUser()
    {
        try
        {
            if (UserSecurity.IsAuthorized(PageState.User, RoleNames.Host) && userid != PageState.User.UserId)
            {
                var user = await UserService.GetUserAsync(userid, PageState.Site.SiteId);
                await UserService.DeleteUserAsync(user.UserId, PageState.Site.SiteId);
                await logger.LogInformation("User Permanently Deleted {User}", user);
                NavigationManager.NavigateTo(NavigateUrl());
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Permanently Deleting User {UserId} {Error}", userid, ex.Message);
            AddModuleMessage(Localizer["Error.DeleteUser"], MessageType.Error);
        }
    }

    private bool ValidateProfiles()
    {
        foreach (Profile profile in profiles)
        {
            var value = GetProfileValue(profile.Name, string.Empty);
            if (string.IsNullOrEmpty(value) && !string.IsNullOrEmpty(profile.DefaultValue))
            {
                userSettings = SettingService.SetSetting(userSettings, profile.Name, profile.DefaultValue);
            }
            if (!profile.IsPrivate || UserSecurity.IsAuthorized(PageState.User, RoleNames.Admin))
            {
                if (profile.IsRequired && string.IsNullOrEmpty(value))
                {
                    AddModuleMessage(string.Format(SharedLocalizer["ProfileRequired"], profile.Title), MessageType.Warning);
                    return false;
                }
                if (!string.IsNullOrEmpty(profile.Validation))
                {
                    Regex regex = new Regex(profile.Validation);
                    bool valid = regex.Match(value).Success;
                    if (!valid)
                    {
                        AddModuleMessage(string.Format(SharedLocalizer["ProfileInvalid"], profile.Title), MessageType.Warning);
                        return false;
                    }
                }
            }
        }
        return true;
    }

    private void ProfileChanged(ChangeEventArgs e, string SettingName)
    {
        var value = (string)e.Value;
        userSettings = SettingService.SetSetting(userSettings, SettingName, value);
    }

    private void TogglePassword()
	{
		if (_passwordtype == "password")
		{
			_passwordtype = "text";
			_togglepassword = SharedLocalizer["HidePassword"];
		}
		else
		{
			_passwordtype = "password";
			_togglepassword = SharedLocalizer["ShowPassword"];
		}
	}
}
